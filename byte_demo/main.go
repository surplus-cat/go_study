package main

import (
	"fmt"
)

//字符类型
//Golang 中没有专门的字符类型，如果要存储单个字符(字母)，一般使用 byte 来保存。
//字符串就是一串固定长度的字符连接起来的字符序列。
//Go的字符串是由单个字节连接起来的。也就是说对于传统的字符串是由字符组成的，而Go的字符串不同，它是由字节组成的。
func main()  {
	var c1 byte = 'a';
	var c2 byte = 'b';
	//我们直接输出了对应字符的码值
	fmt.Println("c1=", c1)
	fmt.Println("c2=", c2)

	//我们格式化输出对应字符
	fmt.Printf("c1=%c c2=%c\n", c1, c2)
	//防止溢出使用更大的int保存
	var c3 int = '美';
	fmt.Printf("c3=%c c3对应的码值=%d\n", c3, c3)

	//说明
	//1. 如果我们保存的字符在ASCII表中，我们可以直接使用byte保存
	//2. 如果我们保存的字符值大于255 这时我们可以使用int保存
	//3. 如果我们需要按照字符输出，可以使用%c格式化输出

	//细节
	//1. 字符是使用单引号扩起来的单个字符
	//2. Go中允许使用转义字符'\'来将其后的字符转变为特殊字符型常量。var c4 char = '\n'
	//3.  Go 语言的字符使用 UTF-8 编码 ，如果想查询字符对应的 utf8 码值 http://www.mytju.com/classcode/tools/encode_utf8.asp
	//英文字母-1个字节 汉字-3个字节
	//4. 在 Go 中，字符的本质是一个整数，直接输出时，是该字符对应的 UTF-8 编码的码值。
	//5. 可以直接给某个变量赋一个数字，然后按格式化输出时%c，会输出该数字对应的 unicode 字符
	var c4 int = 25554
	fmt.Printf("c4=%c\n", c4)

	//6. 字符类型是可以进行运算的，相当于一个整数，因为它都对应有 Unicode 码.
	var n1 = 10 + 'a';
	fmt.Println("n1=", n1)

	//字符串的本质
	//1. 字符型 存储到 计算机中，需要将字符对应的码值(整数)找出来
	// 存储:字符--->对应码值---->二进制-->存储
	// 读取:二进制----> 码值 ----> 字符 --> 读取
	//2. 字符和码值的对应关系是通过字符编码表决定的(是规定好)
	//3. Go语言的编码都统一成了utf-8。非常的方便，很统一，再也没有编码乱码的困扰了
}